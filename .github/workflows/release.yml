# .github/workflows/release.yml

name: Publish to Maven Central and Create GitHub Release

# This workflow triggers only when you push a new tag that starts with 'v'
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*' # e.g., v1.0.0, v2.3.4

# These permissions are required for creating a GitHub Release
permissions:
  contents: write

jobs:
  build-sign-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # === Step 1: Setup Environment ===
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21 and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          # This configures Maven's settings.xml for Sonatype OSSRH
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_TOKEN

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }} # Leave this empty if your key has no passphrase

      # === Step 2: Deploy to Maven Central ===
      # This command builds the main JAR, sources, javadoc, signs them all,
      # and deploys them to the Sonatype staging repository.
      - name: Deploy to Maven Central
        run: mvn -B -P release deploy
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}

      # === Step 3: Build the Deployable WAR for the GitHub Release ===
      # This runs separately because the 'deploy' goal doesn't handle the WAR profile.
      - name: Build Deployable WAR
        run: mvn -B clean package -P deployable-war --file pom.xml

      # === Step 4: Create the GitHub Release and Upload Artifacts ===
      # This uses the artifacts from the previous build steps and attaches them.
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # A list of all the files we want to attach to the release page.
          files: |
            target/zello-vault-aggregator.jar
            target/zello-vault-aggregator-javadoc.jar
            target/zello-vault-aggregator-sources.jar
            target/zello-vault-aggregator.war
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}